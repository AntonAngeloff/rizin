NAME=hexagon jumps
FILE=bins/elf/analysis/hexagon-hello-loop
CMDS=<<EOF
b 0x100000
e analysis.jmp.cref=true
s sym.main
aaa
afx
EOF
EXPECT=<<EOF
c 0x00005124 -> 0x00005128 ?   jump 0x5128
c 0x00005130 -> 0x00005154 ?   if (P0) jump:nt 0x5154
c 0x00005134 -> 0x00005138 [   jump 0x5138
C 0x00005138 -> 0x000050e0 [   call sym.pHello
C 0x0000513c -> 0x000050f8 [   call sym.pWorld
c 0x00005140 -> 0x00005144 [   jump 0x5144
c 0x00005150 -> 0x00005128 ?   jump 0x5128
EOF
RUN

NAME=hexagon immext
FILE=bins/elf/analysis/hexagon-hello-loop
CMDS=<<EOF
b 0x100000
s 0x000050e4
pi 2
s 0x0000539c
pi 4
EOF
EXPECT=<<EOF
?   immext(##0xb0c0)
?   R0 = ##0xb0d0
?   immext(##0xd180)
?   R2 = ##0xd1ac
?   immext(##0xfe105000)
?   R3 = ##-0x1efb000
EOF
RUN

NAME=hexagon immediate search
FILE=bins/elf/analysis/hexagon-hello-loop
CMDS=<<EOF
b 0x100000
aar
/ai 0xdead
/ai 0xbeef
/ai -8
/ai 0x1c00
/ai 0xffffff40 0xffffffff
EOF
EXPECT=<<EOF
0x00000b80   # 4: [   R0.h = #0xdead
0x00000b84   # 4: [   R0.l = #0xbeef
0x00001e68   # 4: [   R4.l = #0xbeef
0x0000342c   # 4: |   if (!P3) memh(R23++#-0x8) = R11.h
0x0000511c   # 4: [   R2 = add(R30,##-0x8)
0x00005128   # 4: [   R2 = memw(R30+##-0x8)
0x00005144   # 4: [   R2 = memw(R30+##-0x8)
0x0000514c   # 4: [   memw(R30+##-0x8) = R2
0x0000564c   # 4: \   R2 = memw(R0+##-0x8)
0x00005654   # 4: \   if (P0.new) R17 = add(R16,##-0x8)
0x00005740   # 4: \   R17 = and(R2,##-0x8)
0x00005840   # 4: /   R4 = add(R2,##-0x8)
0x00005970   # 4: \   if (P2.new) R2 = add(R2,##-0x8)
0x000059d0   # 4: \   R1 = and(R1,##-0x8)
0x00005c88   # 4: |   if (P0.new) R2 = add(R2,##-0x8)
0x00005d00   # 4: |   if (P0.new) R2 = add(R2,##-0x8)
0x00006394   # 4: [   R4 = and(R4,##-0x8)
0x000063f8   # 4: [   R4 = and(R4,##-0x8)
0x0000641c   # 4: [   R4 = and(R4,##-0x8)
0x00006510   # 4: [   R4 = and(R4,##-0x8)
0x00006534   # 4: [   R4 = and(R4,##-0x8)
0x00007134   # 4: |   R3 = mux(P0,##-0x4,#-0x8)
0x0000747c   # 4: \   R2 = add(R2,##-0x8)
0x00007ee0   # 4: /   R17 = add(R17,##-0x8)
0x00008484   # 4: \   R2 = add(R16,add(R2,##-0x8))
0x0000848c   # 4: /   R2 = add(R2,##-0x8)
0x00008500   # 4: \   memd(R2+##-0x8) = R1:0
0x00008598   # 4: \   memd(R2+##-0x8) = R1:0
0x000087b8   # 4: \   memd(R3+##-0x8) = R1:0
0x00009b64   # 4: [   R2 = memw(R18+##-0x8)
0x0000afd8   # 4: /   R3 = and(R3,##-0x8)
0x00000aac   # 4: /   immext(##0x1c00)
0x00000ab4   # 4: |   immext(##0x1c00)
0x00000b44   # 4: /   immext(##0x1c00)
0x00005170   # 4: /   immext(##0x1c00)
0x00005178   # 4: |   immext(##0x1c00)
0x00005180   # 4: /   immext(##0x1c00)
0x000060e4   # 4: /   immext(##0xffffffc0)
0x000060e8   # 4: |   R2 = add(R2,add(R3,##-0x30))
0x000061e4   # 4: /   immext(##0xffffffc0)
0x000061e8   # 4: |   R2 = add(R2,add(R3,##-0x30))
0x00006264   # 4: /   immext(##0xffffffc0)
0x00006268   # 4: |   R2 = add(R2,add(R3,##-0x30))
0x00007140   # 4: |   immext(##0xffffffc0)
0x00007144   # 4: |   R0 = add(##0xfffffffa,mpyi(R2,#0x6))
0x00009684   # 4: |   immext(##0xffffff40)
0x00009688   # 4: \   memh(R0+#0x0) = ##-0x81
EOF
RUN

NAME=hexagon extended immediate search
FILE=bins/elf/analysis/hexagon-hello-loop
BROKEN=1
CMDS=<<EOF
b 0x100000
aar
/ai sym.sys_TLSFreeAll
/ai sym.coredump
EOF
EXPECT=<<EOF
0x000051d4   # 4: ?   R1 = ##0x5410
0x00000b70   # 4: ?   jump sym.coredump
0x00000b7c   # 4: ?   jump sym.coredump
0x00000b8c   # 4: ?   jump sym.coredump
0x00000f48   # 4: ?   jump sym.coredump
0x000051f0   # 4: ?   R28 = ##sym.coredump
EOF
RUN

NAME=hexagon extended immediates
FILE==
CMDS=<<EOF
wx 00c0007fc045e401834080491ae24220
e asm.arch=hexagon
e analysis.arch=hexagon
pi 4
EOF
EXPECT=<<EOF
?   nop
/   immext(##0x1e417000)
|   R3 = memw(GP+##0x1e417004)
\   if (!cmp.eq(R3.new,R2)) jump:t 0x38
EOF
RUN

NAME=hexagon hardware loop simple
FILE==
CMDS=<<EOF
wx 12c03e6388c0006900c0007f0080007f00c0007f
e asm.arch=hexagon
e analysis.arch=hexagon
pi 5
EOF
EXPECT=<<EOF
?   C19:18 = R31:30
[   loop0(0x8,#0x10)
[   nop
/   nop
\   nop     < endloop0
EOF
RUN

NAME=hexagon hardware loop nested I
FILE==
CMDS=<<EOF
wx 00c0007f0bc0006900404d850040000076d09b9a0ac020690040007f07407c700040000087c40aab048063700080007f00c0007f
e asm.arch=hexagon
e analysis.arch=hexagon
pi 13
EOF
EXPECT=<<EOF
?   nop
[   loop0(0x8,#0x3)
/   P0 = R13
|   immext(##0x0)
\   R23:22 = memb_fifo(R27=##0x3)
[   loop1(0x18,#0x2)
/   nop
|   R7 = R28
|   immext(##0x0)
\   memb(R10=##0x7) = R4
/   R4 = R3
|   nop
\   nop     < endloop01
EOF
RUN

NAME=hexagon hardware loop nested II
FILE==
CMDS=<<EOF
wx 00c0007f0bc0206900404d850040000076d09b9a00c000580ac0006907807c7000c0007f044063700080007f00c0007f
e asm.arch=hexagon
e analysis.arch=hexagon
pi 12
EOF
EXPECT=<<EOF
?   nop
[   loop1(0x8,#0x3)
/   P0 = R13
|   immext(##0x0)
\   R23:22 = memb_fifo(R27=##0x3)
[   jump 0x14
[   loop0(0x1c,#0x2)
/   R7 = R28
\   nop     < endloop0
/   R4 = R3
|   nop
\   nop     < endloop1
EOF
RUN

NAME=hexagon undocumented hardware loop
FILE==
CMDS=<<EOF
wx 04c0947c20410069414041752240017543c00175838003b055314420
e asm.arch=hexagon
e analysis.arch=hexagon
pi 7
EOF
EXPECT=<<EOF
?   R5:4 = combine(#0x0,##0x28)
/   loop0(0x14,#0x4)
|   P1 = cmp.gt(R1,##0x2)
|   P2 = cmp.eq(R1,##0x1)
\   P3 = cmp.eq(R1,##0x2)
/   R3 = add(R3,##0x4)
\   R4 = add(R4in,##0x4) ; R5 = add(R5,#1)     < endloop0
EOF
RUN


NAME=hexagon Nt.new register
FILE==
CMDS=<<EOF
wx ffffffff20400078e15f1076e25f107601d6bda120400078e15f1076e25f107601d4bda120400078e15f1076e25f107601d2bda1e15f107620400078e25f107601d4bda1fd5f10760040007fe25f107601d6bda1044411f30ae24221cc7fff59024402f300d2a3a103406070004d2f0c0040007800d4bda103406070004d2f0c0040007800d2bda1174d2f0c004400787140000000d2bda10340607000400078004d2f0c00d2bda10340607000400078004d2f0c00d4bda1
e asm.arch=hexagon
e analysis.arch=hexagon
pi 46
EOF
EXPECT=<<EOF
?   invalid
/   R0 = ##0x1
|   R1 = and(R16,##0xff)
|   R2 = and(R16,##0xff)
\   memw(R29+##0x4) = R0.new
/   R0 = ##0x1
|   R1 = and(R16,##0xff)
|   R2 = and(R16,##0xff)
\   memw(R29+##0x4) = R1.new
/   R0 = ##0x1
|   R1 = and(R16,##0xff)
|   R2 = and(R16,##0xff)
\   memw(R29+##0x4) = R2.new
/   R1 = and(R16,##0xff)
|   R0 = ##0x1
|   R2 = and(R16,##0xff)
\   memw(R29+##0x4) = R0.new
/   R29 = and(R16,##0xff)
|   nop
|   R2 = and(R16,##0xff)
\   memw(R29+##0x4) = R29.new
/   R4 = add(R17,R4)
\   if (!cmp.gtu(R4.new,R2)) jump:t 0x68
/   jump 0xfffffff4
|   R2 = add(R2,R4)
\   memw(R3+##0x0) = R2.new
/   R3 = R0
|   immext(##0xc2f34000)
|   R0 = ##-0x3d0cc000
\   memw(R29+##0x0) = R3.new
/   R3 = R0
|   immext(##0xc2f34000)
|   R0 = ##-0x3d0cc000
\   memw(R29+##0x0) = R0.new
/   immext(##0xc2f345c0)
|   R0 = ##-0x3d0cba20
|   immext(##0x1c40)
\   memw(R29+##0x1c40) = R0.new
/   R3 = R0
|   R0 = ##0x0
|   immext(##0xc2f34000)
\   memw(R29+##-0x3d0cc000) = R0.new
/   R3 = R0
|   R0 = ##0x0
|   immext(##0xc2f34000)
\   memw(R29+##-0x3d0cc000) = R3.new
EOF
RUN

NAME=hexagon hash prefix
FILE==
CMDS=<<EOF
wx 00c0007f0bc0006900404d850040000076d09b9a0ac020690040007f07407c700040000087c40aab048063700080007f00c0007f
e asm.arch=hexagon
e analysis.arch=hexagon
e asm.imm.hash=1
pi 13
EOF
EXPECT=<<EOF
?   nop
[   loop0(0x8,0x3)
/   P0 = R13
|   immext(0x0)
\   R23:22 = memb_fifo(R27=0x3)
[   loop1(0x18,0x2)
/   nop
|   R7 = R28
|   immext(0x0)
\   memb(R10=0x7) = R4
/   R4 = R3
|   nop
\   nop     < endloop01
EOF
RUN

NAME=hexagon negative immediates without sign
FILE=bins/elf/analysis/hexagon-hello-loop
CMDS=<<EOF
b 0x100000
aar
e asm.imm.sign=false
/ai -8
/ai 0xffffff40 0xffffffff
EOF
EXPECT=<<EOF
0x0000342c   # 4: |   if (!P3) memh(R23++#0xfffffff8) = R11.h
0x0000511c   # 4: [   R2 = add(R30,##0xfffffff8)
0x00005128   # 4: [   R2 = memw(R30+##0xfffffff8)
0x00005144   # 4: [   R2 = memw(R30+##0xfffffff8)
0x0000514c   # 4: [   memw(R30+##0xfffffff8) = R2
0x0000564c   # 4: \   R2 = memw(R0+##0xfffffff8)
0x00005654   # 4: \   if (P0.new) R17 = add(R16,##0xfffffff8)
0x00005740   # 4: \   R17 = and(R2,##0xfffffff8)
0x00005840   # 4: /   R4 = add(R2,##0xfffffff8)
0x00005970   # 4: \   if (P2.new) R2 = add(R2,##0xfffffff8)
0x000059d0   # 4: \   R1 = and(R1,##0xfffffff8)
0x00005c88   # 4: |   if (P0.new) R2 = add(R2,##0xfffffff8)
0x00005d00   # 4: |   if (P0.new) R2 = add(R2,##0xfffffff8)
0x00006394   # 4: [   R4 = and(R4,##0xfffffff8)
0x000063f8   # 4: [   R4 = and(R4,##0xfffffff8)
0x0000641c   # 4: [   R4 = and(R4,##0xfffffff8)
0x00006510   # 4: [   R4 = and(R4,##0xfffffff8)
0x00006534   # 4: [   R4 = and(R4,##0xfffffff8)
0x00007134   # 4: |   R3 = mux(P0,##0xfffffffc,#0xfffffff8)
0x0000747c   # 4: \   R2 = add(R2,##0xfffffff8)
0x00007ee0   # 4: /   R17 = add(R17,##0xfffffff8)
0x00008484   # 4: \   R2 = add(R16,add(R2,##0xfffffff8))
0x0000848c   # 4: /   R2 = add(R2,##0xfffffff8)
0x00008500   # 4: \   memd(R2+##0xfffffff8) = R1:0
0x00008598   # 4: \   memd(R2+##0xfffffff8) = R1:0
0x000087b8   # 4: \   memd(R3+##0xfffffff8) = R1:0
0x00009b64   # 4: [   R2 = memw(R18+##0xfffffff8)
0x0000afd8   # 4: /   R3 = and(R3,##0xfffffff8)
0x000060e4   # 4: /   immext(##0xffffffc0)
0x000060e8   # 4: |   R2 = add(R2,add(R3,##0xffffffd0))
0x000061e4   # 4: /   immext(##0xffffffc0)
0x000061e8   # 4: |   R2 = add(R2,add(R3,##0xffffffd0))
0x00006264   # 4: /   immext(##0xffffffc0)
0x00006268   # 4: |   R2 = add(R2,add(R3,##0xffffffd0))
0x00007140   # 4: |   immext(##0xffffffc0)
0x00007144   # 4: |   R0 = add(##0xfffffffa,mpyi(R2,#0x6))
0x00009684   # 4: |   immext(##0xffffff40)
0x00009688   # 4: \   memh(R0+#0x0) = ##0xffffff7f
EOF
RUN

NAME=hexagon regs
FILE=
CMDS=<<EOF
e asm.arch=hexagon
ar
EOF
EXPECT=<<EOF
lc0 = 0x00000000
sa0 = 0x00000000
lc1 = 0x00000000
sa1 = 0x00000000
p3:0 = 0x00000000
c5 = 0x00000000
pc = 0x00000000
ugp = 0x00000000
gp = 0x00000000
cs0 = 0x00000000
cs1 = 0x00000000
upcyclelo = 0x00000000
upcyclehi = 0x00000000
framelimit = 0x00000000
framekey = 0x00000000
pktcountlo = 0x00000000
pktcounthi = 0x00000000
utimerlo = 0x00000000
utimerhi = 0x00000000
m0 = 0x00000000
m1 = 0x00000000
usr = 0x00000000
c1:0 = 0x00000000
c3:2 = 0x00000000
c5:4 = 0x00000000
c7:6 = 0x00000000
c9:8 = 0x00000000
c11:10 = 0x00000000
c13:12 = 0x00000000
c15:14 = 0x00000000
c17:16 = 0x00000000
c19:18 = 0x00000000
c31:30 = 0x00000000
r1:0 = 0x00000000
r3:2 = 0x00000000
r5:4 = 0x00000000
r7:6 = 0x00000000
r9:8 = 0x00000000
r13:12 = 0x00000000
r15:14 = 0x00000000
r17:16 = 0x00000000
r19:18 = 0x00000000
r21:20 = 0x00000000
r23:22 = 0x00000000
r25:24 = 0x00000000
r27:26 = 0x00000000
r11:10 = 0x00000000
r29:28 = 0x00000000
r31:30 = 0x00000000
gelr = 0x00000000
gsr = 0x00000000
gosp = 0x00000000
gbadva = 0x00000000
g4 = 0x00000000
g5 = 0x00000000
g6 = 0x00000000
g7 = 0x00000000
g8 = 0x00000000
g9 = 0x00000000
g10 = 0x00000000
g11 = 0x00000000
g12 = 0x00000000
g13 = 0x00000000
g14 = 0x00000000
g15 = 0x00000000
gpmucnt4 = 0x00000000
gpmucnt5 = 0x00000000
gpmucnt6 = 0x00000000
gpmucnt7 = 0x00000000
g20 = 0x00000000
g21 = 0x00000000
g22 = 0x00000000
g23 = 0x00000000
gpcyclelo = 0x00000000
gpcyclehi = 0x00000000
gpmucnt0 = 0x00000000
gpmucnt1 = 0x00000000
gpmucnt2 = 0x00000000
gpmucnt3 = 0x00000000
g30 = 0x00000000
g31 = 0x00000000
g1:0 = 0x00000000
g3:2 = 0x00000000
g5:4 = 0x00000000
g7:6 = 0x00000000
g9:8 = 0x00000000
g11:10 = 0x00000000
g13:12 = 0x00000000
g15:14 = 0x00000000
g17:16 = 0x00000000
g19:18 = 0x00000000
g21:20 = 0x00000000
g23:22 = 0x00000000
g25:24 = 0x00000000
g27:26 = 0x00000000
g29:28 = 0x00000000
g31:30 = 0x00000000
q0 = 0x00000000000000000000000000000000
q1 = 0x00000000000000000000000000000000
q2 = 0x00000000000000000000000000000000
q3 = 0x00000000000000000000000000000000
v3:0 = ERROR
v7:4 = ERROR
v11:8 = ERROR
v15:12 = ERROR
v19:16 = ERROR
v23:20 = ERROR
v27:24 = ERROR
v31:28 = ERROR
v0 = ERROR
v1 = ERROR
v2 = ERROR
v3 = ERROR
v4 = ERROR
v5 = ERROR
v6 = ERROR
v7 = ERROR
v8 = ERROR
v9 = ERROR
v10 = ERROR
v11 = ERROR
v12 = ERROR
v13 = ERROR
v14 = ERROR
v15 = ERROR
v16 = ERROR
v17 = ERROR
v18 = ERROR
v19 = ERROR
v20 = ERROR
v21 = ERROR
v22 = ERROR
v23 = ERROR
v24 = ERROR
v25 = ERROR
v26 = ERROR
v27 = ERROR
v28 = ERROR
v29 = ERROR
v30 = ERROR
v31 = ERROR
v1:0 = ERROR
v3:2 = ERROR
v5:4 = ERROR
v7:6 = ERROR
v9:8 = ERROR
v11:10 = ERROR
v13:12 = ERROR
v15:14 = ERROR
v17:16 = ERROR
v19:18 = ERROR
v21:20 = ERROR
v23:22 = ERROR
v25:24 = ERROR
v27:26 = ERROR
v29:28 = ERROR
v31:30 = ERROR
r0 = 0x00000000
r1 = 0x00000000
r2 = 0x00000000
r3 = 0x00000000
r4 = 0x00000000
r5 = 0x00000000
r6 = 0x00000000
r7 = 0x00000000
r8 = 0x00000000
r9 = 0x00000000
r12 = 0x00000000
r13 = 0x00000000
r14 = 0x00000000
r15 = 0x00000000
r16 = 0x00000000
r17 = 0x00000000
r18 = 0x00000000
r19 = 0x00000000
r20 = 0x00000000
r21 = 0x00000000
r22 = 0x00000000
r23 = 0x00000000
r24 = 0x00000000
r25 = 0x00000000
r26 = 0x00000000
r27 = 0x00000000
r28 = 0x00000000
r10 = 0x00000000
r11 = 0x00000000
r29 = 0x00000000
r30 = 0x00000000
r31 = 0x00000000
p0 = 0x00000000
p1 = 0x00000000
p2 = 0x00000000
p3 = 0x00000000
sgp0 = 0x00000000
sgp1 = 0x00000000
stid = 0x00000000
elr = 0x00000000
badva0 = 0x00000000
badva1 = 0x00000000
ssr = 0x00000000
ccr = 0x00000000
htid = 0x00000000
badva = 0x00000000
imask = 0x00000000
gevb = 0x00000000
s12 = 0x00000000
s13 = 0x00000000
s14 = 0x00000000
s15 = 0x00000000
evb = 0x00000000
modectl = 0x00000000
syscfg = 0x00000000
s19 = 0x00000000
ipendad = 0x00000000
vid = 0x00000000
vid1 = 0x00000000
bestwait = 0x00000000
s24 = 0x00000000
schedcfg = 0x00000000
s26 = 0x00000000
cfgbase = 0x00000000
diag = 0x00000000
rev = 0x00000000
pcyclelo = 0x00000000
pcyclehi = 0x00000000
isdbst = 0x00000000
isdbcfg0 = 0x00000000
isdbcfg1 = 0x00000000
livelock = 0x00000000
brkptpc0 = 0x00000000
brkptcfg0 = 0x00000000
brkptpc1 = 0x00000000
brkptcfg1 = 0x00000000
isdbmbxin = 0x00000000
isdbmbxout = 0x00000000
isdben = 0x00000000
isdbgpr = 0x00000000
pmucnt4 = 0x00000000
pmucnt5 = 0x00000000
pmucnt6 = 0x00000000
pmucnt7 = 0x00000000
pmucnt0 = 0x00000000
pmucnt1 = 0x00000000
pmucnt2 = 0x00000000
pmucnt3 = 0x00000000
pmuevtcfg = 0x00000000
s53 = 0x00000000
pmuevtcfg1 = 0x00000000
pmustid1 = 0x00000000
timerlo = 0x00000000
timerhi = 0x00000000
s58 = 0x00000000
s59 = 0x00000000
s60 = 0x00000000
s61 = 0x00000000
s62 = 0x00000000
s63 = 0x00000000
commit1t = 0x00000000
commit2t = 0x00000000
commit3t = 0x00000000
commit4t = 0x00000000
commit5t = 0x00000000
commit6t = 0x00000000
pcycle1t = 0x00000000
pcycle2t = 0x00000000
pcycle3t = 0x00000000
pcycle4t = 0x00000000
pcycle5t = 0x00000000
pcycle6t = 0x00000000
stfinst = 0x00000000
isdbcmd = 0x00000000
isdbver = 0x00000000
brkptinfo = 0x00000000
rgdr3 = 0x00000000
s1:0 = 0x00000000
s3:2 = 0x00000000
s5:4 = 0x00000000
s7:6 = 0x00000000
s9:8 = 0x00000000
s11:10 = 0x00000000
s13:12 = 0x00000000
s15:14 = 0x00000000
s17:16 = 0x00000000
s19:18 = 0x00000000
s21:20 = 0x00000000
s23:22 = 0x00000000
s25:24 = 0x00000000
s27:26 = 0x00000000
s29:28 = 0x00000000
s31:30 = 0x00000000
s33:32 = 0x00000000
s35:34 = 0x00000000
s37:36 = 0x00000000
s39:38 = 0x00000000
s41:40 = 0x00000000
s43:42 = 0x00000000
s45:44 = 0x00000000
s47:46 = 0x00000000
s49:48 = 0x00000000
s51:50 = 0x00000000
s53:52 = 0x00000000
s55:54 = 0x00000000
s57:56 = 0x00000000
s59:58 = 0x00000000
s61:60 = 0x00000000
s63:62 = 0x00000000
s65:64 = 0x00000000
s67:66 = 0x00000000
s69:68 = 0x00000000
s71:70 = 0x00000000
s73:72 = 0x00000000
s75:74 = 0x00000000
s77:76 = 0x00000000
s79:78 = 0x00000000
EOF
RUN

